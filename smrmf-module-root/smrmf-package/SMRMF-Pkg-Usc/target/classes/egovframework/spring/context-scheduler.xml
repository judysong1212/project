<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd">
 
 
    <!-- 시스템 커넥션 health check 절대 지우면 안됨   -->
    <bean id="healthTask" class="com.app.smrmf.sche.quartz.HealthTask"/> 
   <!-- 시스템 커넥션 health check 절대 지우면 안됨   -->
    <bean id="dummyTask" class="com.app.smrmf.pkg.sche.quartz.DummyTask"/>
    <bean id="schePsnl0123Task" class="com.app.smrmf.pkg.sche.quartz.SchePsnl0123Task"/>
    <bean id="schePsnl0100EndToPsnl0100Task" class="com.app.smrmf.pkg.sche.quartz.SchePsnl0100EndToPsnl0100Task"/>
 
     
	 <bean name="dummyJob" class="org.springframework.scheduling.quartz.JobDetailBean">
	    <property name="jobClass" value="com.app.smrmf.pkg.sche.quartz.DummyJobBean"/>
	    <property name="jobDataAsMap">
	        <map>
	             <entry key="dummyTask" value-ref="dummyTask"/>
	        </map>
	    </property>
    </bean>
    
    
     <bean name="schePsnl0123Job" class="org.springframework.scheduling.quartz.JobDetailBean">
	    <property name="jobClass" value="com.app.smrmf.pkg.sche.quartz.SchePsnl0123JobBean"/>
	    <property name="jobDataAsMap">
	        <map>
	             <entry key="schePsnl0123Task" value-ref="schePsnl0123Task"/>
	        </map>
	    </property>
    </bean>
    
       <bean name="schePsnl0100EndJob" class="org.springframework.scheduling.quartz.JobDetailBean">
	    <property name="jobClass" value="com.app.smrmf.pkg.sche.quartz.SchePsnl0100EndToPsnl0100JobBean"/>
	    <property name="jobDataAsMap">
	        <map>
	             <entry key="schePsnl0100EndToPsnl0100Task" value-ref="schePsnl0100EndToPsnl0100Task"/>
	        </map>
	    </property>
    </bean>
  
    <bean name="healthTaskCheck" class="org.springframework.scheduling.quartz.JobDetailBean">
	    <property name="jobClass" value="com.app.smrmf.sche.quartz.HealthTaskBean"/>
	    <property name="jobDataAsMap">
	        <map>
	             <entry key="healthTask" value-ref="healthTask"/>
	        </map>
	    </property>
	<!--    <property name="applicationContextJobDataKey" value="applicationContext" />  --> 
    </bean>
    
	<!-- <bean id="simpleTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerBean">
		  <property name="jobDetail" ref="dummyJob"/>
		  <property name="startDelay" value="1000"/>
		  <property name="repeatInterval" value="3000"/>
	</bean>  --> 
	
   <bean id="cronTrigger01" class="org.springframework.scheduling.quartz.CronTriggerBean">
	  <property name="jobDetail" ref="dummyJob"/>
	 <!-- <property name="cronExpression" value="*/50 * * * * ?" /> --> 
	   <property name="cronExpression" value="0 0 01 * * ?" />  
  </bean>
  
  <bean id="cronTrigger02" class="org.springframework.scheduling.quartz.CronTriggerBean">
	  <property name="jobDetail" ref="schePsnl0123Job"/>
	    <!-- <property name="cronExpression" value="*/50 * * * * ?" />  --> 
	    <property name="cronExpression" value="0 05 01 * * ?" /> 
  </bean>    
  
   <bean id="cronTrigger03" class="org.springframework.scheduling.quartz.CronTriggerBean">
	  <property name="jobDetail" ref="schePsnl0100EndJob"/>
	  <!--   <property name="cronExpression" value="*/50 * * * * ?" /> -->  
	   <property name="cronExpression" value="0 10 01 * * ?" /> 
  </bean>    
 
   
     <bean id="healthCronTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
	  <property name="jobDetail" ref="healthTaskCheck"/> 
	   <property name="cronExpression" value="0 0/5 * * * ?" />  
  </bean>
 
   <bean id="schedulerFactory"   class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
    <property name="jobDetails"> 
		<list> 
			<ref bean="dummyJob" /> 
			<ref bean="schePsnl0123Job" /> 
			<ref bean="schePsnl0100EndJob" /> 
			<ref bean="healthTaskCheck" />  
		</list> 
	</property> 
       <property name="triggers">
           <list>
               <ref bean="cronTrigger01"/>
               <ref bean="cronTrigger02"/>
               <ref bean="cronTrigger03"/> 
               <ref bean="healthCronTrigger"/> 
           </list>
       </property> 
       <property name="applicationContextSchedulerContextKey" value="applicationContext"/> 
   </bean> 
    
    <!--  
     <bean name="dummyJob" class="org.springframework.scheduling.quartz.JobDetailFactoryBean"
          p:jobClass="pe.beyondj2ee.quartz.DummyJobBean" 
          p:durability="true">
        <property name="jobDataAsMap">
            <map>
                <entry key="dummyTask" value-ref="dummyTask"/>
            </map>
        </property>
    </bean>
 
    <bean id="cronTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean"
          p:jobDetail-ref="dummyJob"
          p:startDelay="1000"
          p:cronExpression="0/3 * * * * ?"/>
 
    <bean id="schedulerFactoryBean" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
        <property name="triggers">
            <list>
                <ref bean="cronTrigger"/>
            </list>
        </property>
    </bean>
    
  

	1. 해당 프로젝트의 applicationContext에 추가할 사항
1) <beans> 의 속성값 추가
xmlns:context="http://www.springframework.org/schema/context"
xsi:schemaLocation="http://www.springframework.org/schema/context" <= 기존것에 추가로 등록
2) <beans> 의 자식노드로 추가
<context:component-scan base-package="스케쥴을 수행할 클래스의 패키지명" />
<task:annotation-driven/>
2. 스케쥴링을 수행할 대상
@Component
public class ScheduleJobLauncher {
 
 @Scheduled(cron="0 40 1 * * * ") // 매일 새벽 1시 40분에 수행하겠다.
 public void testScheduleJobLauncher(){
  
//  Calendar calendar = Calendar.getInstance() ;
//  
//  int hour = 0;
//  int minute = 0;
//  int second = 0;
//  
//  hour = calendar.get(calendar.HOUR) ;
//  minute = calendar.get(calendar.MINUTE) ;
//  second = calendar.get(calendar.SECOND) ;
//   
//  System.out.println("::::::::::::: 스케쥴링 테스트 시작 :::::::::::::::::::::: ");
//  System.out.println(hour + " - " + minute + " - " + second );
  System.out.println("스케쥴링 테스트");
//   hour = calendar.get(calendar.HOUR) ;
//   minute = calendar.get(calendar.MINUTE) ;
//   second = calendar.get(calendar.SECOND) ;
//   
//   System.out.println("::::::::::::: 스케쥴링 테스트 끝 :::::::::::::::::::::: ");
//   System.out.println(hour + " - " + minute + " - " + second );
 }
}
* 수행 was는 톰캣이었는데 해당 스케쥴링 중에 발견된 특이사항으로는 하나의 톰캣에 존재하는 인스턴스의 수만큼 크론이 수행된다는 사실 ( 테스트 환경에서는 3개의 인스턴스가 존재하였고 결국 같은 작업을 3번 수행하더라
 -->

    
</beans>
